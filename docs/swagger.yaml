basePath: /api-auth
definitions:
  handler.CurrentUserResponse:
    properties:
      userGUID:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    type: object
  handler.LogoutResponse:
    properties:
      message:
        description: |-
          Сообщение о результате операции
          example: выполнен выход из аккаунта
        type: string
    type: object
  handler.RefreshTokenRequest:
    properties:
      refreshToken:
        description: |-
          Refresh токен
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  model.TokensPair:
    properties:
      accessToken:
        description: |-
          Access токен (JWT)
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refreshToken:
        description: |-
          Refresh токен (для получения новой пары)
          example: vcSi0369y1I62wOpxZFpgZ...
        type: string
    type: object
host: localhost:8090
info:
  contact: {}
  description: REST API для аутентификации пользователей. Тестовое задание на позицию
    Junior Backend Developer
  title: Auth API Service
  version: "1.0"
paths:
  /get-tokens:
    get:
      consumes:
      - application/json
      description: 'Создает новую пару JWT-токенов и сохраняет refresh-токен в БД.
        Пример запроса: GET /api-auth/get-tokens?guid=123e4567-e89b-12d3-a456-426614174000'
      parameters:
      - description: GUID (UUID) пользователя
        in: query
        name: guid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'успешный ответ" example:`{"access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "refresh_token": "vcSi0369y1I62wOpxZFpgZ......"}`'
          schema:
            $ref: '#/definitions/model.TokensPair'
        "400":
          description: невалидный или отсутствующий GUID
          schema:
            type: string
        "500":
          description: ошибка сохранения refresh-токена
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Генерация токенов
      tags:
      - Authentication
  /logout:
    post:
      description: 'Инвалидирует refresh-токен и завершает сеанс пользователя. Пример
        запроса: POST /api-auth/logout с заголовком Authorization: Bearer <access_token>'
      parameters:
      - default: Bearer <access_token>
        description: Bearer токен
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Успешный выход" example:`{"message": "выполнен выход из аккаунта"}`'
          schema:
            $ref: '#/definitions/handler.LogoutResponse'
        "400":
          description: ошибка запроса" example:"ошибка запроса
          schema:
            type: string
        "401":
          description: пользователь не авторизован" example:"не авторизован
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Выход из аккаунта
      tags:
      - Authentication
  /me:
    get:
      description: 'Извлекает GUID (UUID) пользователя из JWT-токена. Пример запроса:
        GET /api-auth/me с заголовком Authorization: Bearer <access_token>'
      parameters:
      - default: Bearer <access_token>
        description: Bearer токен
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'Успешный ответ" example:`{"user_guid": "123e4567-e89b-12d3-a456-426614174000"}`'
          schema:
            $ref: '#/definitions/handler.CurrentUserResponse'
        "401":
          description: Пользователь не авторизован или токен недействителен" example:"не
            авторизован
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получение GUID (UUID) пользователя
      tags:
      - Authentication
  /refresh-token:
    post:
      consumes:
      - application/json
      description: 'Обновляет пару JWT-токенов по refresh-токену с проверкой IP и
        User-Agent. Пример запроса: POST /api-auth/refresh-token с заголовком Authorization:
        Bearer <access_token> и телом {"refresh_token": "<refresh_token>"}'
      parameters:
      - default: Bearer <access_token>
        description: Access токен
        in: header
        name: Authorization
        required: true
        type: string
      - description: Refresh токен в теле запроса
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'успешное обновление токенов" example:`{"access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
            "refresh_token": "vcSi0369y1I62wOpxZFpgZ......"}`'
          schema:
            $ref: '#/definitions/model.TokensPair'
        "400":
          description: неверный JSON в теле запроса" example:"неверный json
          schema:
            type: string
        "401":
          description: не удалось обновить токены" example:"не удалось обновить токены
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Обновление токенов
      tags:
      - Authentication
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
